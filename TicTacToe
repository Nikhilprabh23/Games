import tkinter as tk
import tkinter.messagebox

# Function to check if someone has won
def check_winner(board, player):
    win_conditions = [
        [0, 1, 2], [3, 4, 5], [6, 7, 8],  # Rows
        [0, 3, 6], [1, 4, 7], [2, 5, 8],  # Columns
        [0, 4, 8], [2, 4, 6]              # Diagonals
    ]
    for condition in win_conditions:
        if all(board[pos] == player for pos in condition):
            return True
    return False

# Function to check if the board is full
def check_board_full(board):
    return all(cell != ' ' for cell in board)

# Function for AI move using Minimax algorithm
def ai_move(board):
    best_score = float('-inf')
    best_move = None

    for i in range(9):
        if board[i] == ' ':
            board[i] = 'O'
            score = minimax(board, 0, False)
            board[i] = ' '
            if score > best_score:
                best_score = score
                best_move = i

    return best_move

def minimax(board, depth, is_maximizing):
    if check_winner(board, 'O'):
        return 1
    elif check_winner(board, 'X'):
        return -1
    elif check_board_full(board):
        return 0

    if is_maximizing:
        best_score = float('-inf')
        for i in range(9):
            if board[i] == ' ':
                board[i] = 'O'
                score = minimax(board, depth + 1, False)
                board[i] = ' '
                best_score = max(score, best_score)
        return best_score
    else:
        best_score = float('inf')
        for i in range(9):
            if board[i] == ' ':
                board[i] = 'X'
                score = minimax(board, depth + 1, True)
                board[i] = ' '
                best_score = min(score, best_score)
        return best_score

def perform_move(button, position):
    global board, player

    if board[position] == ' ':
        button.config(text='X', state=tk.DISABLED, disabledforeground='black')
        board[position] = 'X'
        if check_winner(board, 'X'):
            tkinter.messagebox.showinfo('Result', 'Congratulations! You win!')
            reset_game()
        elif check_board_full(board):
            tkinter.messagebox.showinfo('Result', "It's a tie!")
            reset_game()
        else:
            player = 'O'
            position = ai_move(board)
            buttons[position].config(text='O', state=tk.DISABLED, disabledforeground='black')
            board[position] = 'O'
            if check_winner(board, 'O'):
                tkinter.messagebox.showinfo('Result', 'Sorry, AI wins!')
                reset_game()
            elif check_board_full(board):
                tkinter.messagebox.showinfo('Result', "It's a tie!")
                reset_game()
            else:
                player = 'X'

def reset_game():
    global board, player
    board = [' ' for _ in range(9)]
    player = 'X'
    for button in buttons:
        button.config(text='', state=tk.NORMAL)

# Create the main window
root = tk.Tk()
root.title('Tic Tac Toe')

# Create buttons for the board
buttons = []
for i in range(9):
    button = tk.Button(root, text='', font=('Arial', 20), width=4, height=2,
                       command=lambda idx=i: perform_move(buttons[idx], idx))
    button.grid(row=i // 3, column=i % 3)
    buttons.append(button)

# Initialize the game variables
board = [' ' for _ in range(9)]
player = 'X'

# Start the game
root.mainloop()
